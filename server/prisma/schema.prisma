generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model ai_summaries {
  id                  Int       @id @default(autoincrement())
  note_id             Int?
  summary_text        String
  ai_model_version    String?   @db.VarChar(50)
  confidence_score    Decimal?  @db.Decimal(3, 2)
  generated_at        DateTime? @default(now()) @db.Timestamp(6)
  is_approved_by_user Boolean?  @default(false)
  notes               notes?    @relation(fields: [note_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model audio_content {
  id                Int                 @id @default(autoincrement())
  user_id           Int?
  note_id           Int?
  title             String              @db.VarChar(255)
  audio_file_path   String              @db.VarChar(500)
  duration_seconds  Int?
  file_size_bytes   BigInt?
  tts_model_version String?             @db.VarChar(50)
  generated_at      DateTime?           @default(now()) @db.Timestamp(6)
  play_count        Int?                @default(0)
  notes             notes?              @relation(fields: [note_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users             users?              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  brainrot_sessions brainrot_sessions[]
  playlist_items    playlist_items[]

  @@index([user_id], map: "idx_audio_content_user_id")
}

model audio_playlists {
  id             Int              @id @default(autoincrement())
  user_id        Int?
  name           String           @db.VarChar(255)
  description    String?
  is_public      Boolean?         @default(false)
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  updated_at     DateTime?        @default(now()) @db.Timestamp(6)
  users          users?           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  playlist_items playlist_items[]
}

model brainrot_sessions {
  id                       Int            @id @default(autoincrement())
  user_id                  Int?
  audio_content_id         Int?
  background_video_url     String?        @db.VarChar(500)
  session_duration_seconds Int?
  started_at               DateTime?      @default(now()) @db.Timestamp(6)
  completed_at             DateTime?      @db.Timestamp(6)
  audio_content            audio_content? @relation(fields: [audio_content_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                    users?         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model card_progress {
  id                    Int                    @id @default(autoincrement())
  user_id               Int?
  flashcard_id          Int?
  algorithm_id          Int?                   @default(1)
  current_interval      Int?                   @default(1)
  ease_factor           Decimal?               @default(2.50) @db.Decimal(4, 2)
  next_review_date      DateTime?              @default(dbgenerated("(CURRENT_DATE + '1 day'::interval)")) @db.Date
  total_reviews         Int?                   @default(0)
  correct_reviews       Int?                   @default(0)
  consecutive_correct   Int?                   @default(0)
  last_review_date      DateTime?              @db.Date
  last_response         String?                @db.VarChar(20)
  learning_stage        String?                @default("new") @db.VarChar(20)
  mastery_level         Int?                   @default(0)
  created_at            DateTime?              @default(now()) @db.Timestamp(6)
  updated_at            DateTime?              @default(now()) @db.Timestamp(6)
  repetition_algorithms repetition_algorithms? @relation(fields: [algorithm_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  flashcards            flashcards?            @relation(fields: [flashcard_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                 users?                 @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  card_reviews          card_reviews[]

  @@unique([user_id, flashcard_id])
  @@index([next_review_date], map: "idx_flashcards_next_review")
}

model card_reviews {
  id                   Int             @id @default(autoincrement())
  session_id           Int?
  card_progress_id     Int?
  user_response        String          @db.VarChar(20)
  response_time_ms     Int?
  previous_interval    Int?
  new_interval         Int?
  previous_ease_factor Decimal?        @db.Decimal(4, 2)
  new_ease_factor      Decimal?        @db.Decimal(4, 2)
  reviewed_at          DateTime?       @default(now()) @db.Timestamp(6)
  card_progress        card_progress?  @relation(fields: [card_progress_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  study_sessions       study_sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model chat_messages {
  id                                     Int       @id @default(autoincrement())
  sender_id                              Int?
  receiver_id                            Int?
  message_text                           String
  created_at                             DateTime? @default(now()) @db.Timestamp(6)
  is_read                                Boolean?  @default(false)
  users_chat_messages_receiver_idTousers users?    @relation("chat_messages_receiver_idTousers", fields: [receiver_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_chat_messages_sender_idTousers   users?    @relation("chat_messages_sender_idTousers", fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model course_reviews {
  id                Int       @id @default(autoincrement())
  user_id           Int?
  course_id         Int?
  difficulty_rating Int
  workload_rating   Int?
  review_text       String?
  semester_taken    String    @db.VarChar(20)
  year_taken        Int
  is_anonymous      Boolean?  @default(false)
  up_votes          Int?      @default(0)
  down_votes        Int?      @default(0)
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  updated_at        DateTime? @default(now()) @db.Timestamp(6)
  courses           courses?  @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users             users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, course_id])
}

model courses {
  id             Int              @id @default(autoincrement())
  course_code    String           @unique @db.VarChar(50)
  course_name    String           @db.VarChar(255)
  department     String           @db.VarChar(255)
  credit_hours   Int?             @default(3)
  description    String?
  difficulty     difficulty?      @default(Beginner)
  course_type    course_type?     @default(Core)
  prerequisites  String[]
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  course_reviews course_reviews[]
  notes          notes[]
  user_courses   user_courses[]

  @@index([course_code], map: "idx_courses_code")
  @@index([department], map: "idx_courses_department")
}

model deck_tags {
  deck_id         Int
  tag_id          Int
  flashcard_decks flashcard_decks @relation(fields: [deck_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tags            tags            @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([deck_id, tag_id])
}

model document_chunks {
  id          Int       @id @default(autoincrement())
  document_id Int?
  chunk_text  String
  chunk_order Int
  chunk_type  String?   @db.VarChar(50)
  word_count  Int?
  processed   Boolean?  @default(false)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  notes       notes?    @relation(fields: [document_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model extracted_concepts {
  id               Int       @id @default(autoincrement())
  document_id      Int?
  concept_text     String    @db.VarChar(200)
  definition       String?
  importance_score Decimal?  @db.Decimal(3, 2)
  frequency        Int?      @default(1)
  concept_type     String?   @db.VarChar(50)
  extracted_at     DateTime? @default(now()) @db.Timestamp(6)
  notes            notes?    @relation(fields: [document_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model flashcard_decks {
  id              Int              @id @default(autoincrement())
  user_id         Int?
  document_id     Int?
  title           String           @db.VarChar(200)
  description     String?
  color           String?          @default("#007bff") @db.VarChar(7)
  is_public       Boolean?         @default(false)
  creation_method String           @db.VarChar(20)
  created_at      DateTime?        @default(now()) @db.Timestamp(6)
  updated_at      DateTime?        @default(now()) @db.Timestamp(6)
  is_deleted      Boolean?         @default(false)
  deck_tags       deck_tags[]
  notes           notes?           @relation(fields: [document_id], references: [id], onUpdate: NoAction)
  users           users?           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  flashcards      flashcards[]
  study_sessions  study_sessions[]
}

model flashcard_options {
  id           Int         @id @default(autoincrement())
  flashcard_id Int?
  option_text  String
  is_correct   Boolean?    @default(false)
  option_order Int
  created_at   DateTime?   @default(now()) @db.Timestamp(6)
  flashcards   flashcards? @relation(fields: [flashcard_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model flashcard_tags {
  flashcard_id Int
  tag_id       Int
  flashcards   flashcards @relation(fields: [flashcard_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tags         tags       @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([flashcard_id, tag_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model flashcards {
  id                Int                 @id @default(autoincrement())
  deck_id           Int?
  question          String
  answer            String
  explanation       String?
  difficulty_level  Int?                @default(3)
  card_type         String?             @default("basic") @db.VarChar(20)
  source_text       String?
  auto_generated    Boolean?            @default(false)
  confidence_score  Decimal?            @db.Decimal(3, 2)
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @default(now()) @db.Timestamp(6)
  is_deleted        Boolean?            @default(false)
  card_progress     card_progress[]
  flashcard_options flashcard_options[]
  flashcard_tags    flashcard_tags[]
  flashcard_decks   flashcard_decks?    @relation(fields: [deck_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model generation_jobs {
  id                   Int                   @id @default(autoincrement())
  document_id          Int?
  user_id              Int?
  template_id          Int?
  status               String?               @default("queued") @db.VarChar(20)
  cards_generated      Int?                  @default(0)
  error_message        String?
  started_at           DateTime?             @db.Timestamp(6)
  completed_at         DateTime?             @db.Timestamp(6)
  created_at           DateTime?             @default(now()) @db.Timestamp(6)
  notes                notes?                @relation(fields: [document_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  generation_templates generation_templates? @relation(fields: [template_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                users?                @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model generation_templates {
  id                Int                @id @default(autoincrement())
  name              String             @db.VarChar(100)
  description       String?
  prompt_template   String
  card_type         String?            @default("basic") @db.VarChar(20)
  target_difficulty Int?               @default(3)
  is_default        Boolean?           @default(false)
  created_at        DateTime?          @default(now()) @db.Timestamp(6)
  generation_jobs   generation_jobs[]
  user_preferences  user_preferences[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model library_rooms {
  id           Int             @id @default(autoincrement())
  name         String          @db.VarChar(255)
  capacity     Int
  size_sqft    Int?
  features     room_features[]
  description  String?
  floor_number Int?
  room_number  String?         @db.VarChar(50)
  is_active    Boolean?        @default(true)
  reservations reservations[]
  seats        seats[]
}

model note_comments {
  id                  Int             @id @default(autoincrement())
  user_id             Int?
  note_id             Int?
  parent_comment_id   Int?
  comment_text        String
  created_at          DateTime?       @default(now()) @db.Timestamp(6)
  updated_at          DateTime?       @default(now()) @db.Timestamp(6)
  notes               notes?          @relation(fields: [note_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  note_comments       note_comments?  @relation("note_commentsTonote_comments", fields: [parent_comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  other_note_comments note_comments[] @relation("note_commentsTonote_comments")
  users               users?          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model note_interactions {
  id               Int              @id @default(autoincrement())
  user_id          Int?
  note_id          Int?
  interaction_type interaction_type
  created_at       DateTime?        @default(now()) @db.Timestamp(6)
  notes            notes?           @relation(fields: [note_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users            users?           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, note_id, interaction_type])
}

model notes {
  id                 Int                  @id @default(autoincrement())
  user_id            Int?
  course_id          Int?
  title              String               @db.VarChar(255)
  description        String?
  file_name          String               @db.VarChar(255)
  file_path          String               @db.VarChar(500)
  file_type          file_type
  file_size_bytes    BigInt?
  visibility         note_visibility?     @default(course_only)
  tags               String[]
  upload_date        DateTime?            @default(now()) @db.Timestamp(6)
  last_modified      DateTime?            @default(now()) @db.Timestamp(6)
  download_count     Int?                 @default(0)
  is_processed_by_ai Boolean?             @default(false)
  ai_summaries       ai_summaries[]
  audio_content      audio_content[]
  document_chunks    document_chunks[]
  extracted_concepts extracted_concepts[]
  flashcard_decks    flashcard_decks[]
  generation_jobs    generation_jobs[]
  note_comments      note_comments[]
  note_interactions  note_interactions[]
  courses            courses?             @relation(fields: [course_id], references: [id], onUpdate: NoAction)
  users              users?               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([course_id], map: "idx_notes_course_id")
  @@index([tags], map: "idx_notes_tags", type: Gin)
  @@index([user_id], map: "idx_notes_user_id")
  @@index([visibility], map: "idx_notes_visibility")
}

model playlist_items {
  id               Int              @id @default(autoincrement())
  playlist_id      Int?
  audio_content_id Int?
  position         Int
  added_at         DateTime?        @default(now()) @db.Timestamp(6)
  audio_content    audio_content?   @relation(fields: [audio_content_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  audio_playlists  audio_playlists? @relation(fields: [playlist_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([playlist_id, audio_content_id])
  @@unique([playlist_id, position])
}

model repetition_algorithms {
  id                  Int                @id @default(autoincrement())
  name                String             @unique @db.VarChar(50)
  description         String?
  initial_interval    Int?               @default(1)
  ease_factor         Decimal?           @default(2.50) @db.Decimal(3, 2)
  interval_multiplier Decimal?           @default(2.00) @db.Decimal(3, 2)
  minimum_interval    Int?               @default(1)
  maximum_interval    Int?               @default(36500)
  is_active           Boolean?           @default(true)
  card_progress       card_progress[]
  user_preferences    user_preferences[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reservations {
  id            Int            @id @default(autoincrement())
  user_id       Int?
  room_id       Int?
  seat_id       Int?
  start_time    DateTime       @db.Timestamp(6)
  end_time      DateTime       @db.Timestamp(6)
  status        seat_status?   @default(reserved)
  purpose       String?        @db.VarChar(255)
  created_at    DateTime?      @default(now()) @db.Timestamp(6)
  library_rooms library_rooms? @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  seats         seats?         @relation(fields: [seat_id], references: [id], onUpdate: NoAction)
  users         users?         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([start_time, end_time], map: "idx_reservations_datetime")
  @@index([user_id], map: "idx_reservations_user_id")
}

model seats {
  id               Int            @id @default(autoincrement())
  room_id          Int?
  seat_number      String         @db.VarChar(10)
  position_x       Decimal?       @db.Decimal(10, 2)
  position_y       Decimal?       @db.Decimal(10, 2)
  has_computer     Boolean?       @default(false)
  has_power_outlet Boolean?       @default(true)
  is_accessible    Boolean?       @default(false)
  is_active        Boolean?       @default(true)
  reservations     reservations[]
  library_rooms    library_rooms? @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([room_id, seat_number])
}

model study_sessions {
  id                 Int              @id @default(autoincrement())
  user_id            Int?
  deck_id            Int?
  session_type       String?          @default("review") @db.VarChar(20)
  cards_studied      Int?             @default(0)
  cards_correct      Int?             @default(0)
  total_time_seconds Int?             @default(0)
  started_at         DateTime?        @default(now()) @db.Timestamp(6)
  ended_at           DateTime?        @db.Timestamp(6)
  is_completed       Boolean?         @default(false)
  card_reviews       card_reviews[]
  flashcard_decks    flashcard_decks? @relation(fields: [deck_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users              users?           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model tags {
  id             Int              @id @default(autoincrement())
  name           String           @unique @db.VarChar(50)
  color          String?          @default("#6c757d") @db.VarChar(7)
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  deck_tags      deck_tags[]
  flashcard_tags flashcard_tags[]
}

model user_activity {
  id               Int       @id @default(autoincrement())
  user_id          Int?
  activity_type    String    @db.VarChar(50)
  activity_details Json?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  users            users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([activity_type], map: "idx_user_activity_type")
  @@index([user_id], map: "idx_user_activity_user_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model user_connections {
  id                                         Int       @id @default(autoincrement())
  requester_id                               Int?
  addressee_id                               Int?
  status                                     status?   @default(pending)
  request_type                               req_type? @default(peer)
  created_at                                 DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                                 DateTime? @default(now()) @db.Timestamptz(6)
  users_user_connections_addressee_idTousers users?    @relation("user_connections_addressee_idTousers", fields: [addressee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_user_connections_requester_idTousers users?    @relation("user_connections_requester_idTousers", fields: [requester_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([requester_id, addressee_id])
}

model user_courses {
  id                Int       @id @default(autoincrement())
  user_id           Int?
  course_id         Int?
  enrolled_semester Int
  is_completed      Boolean?  @default(false)
  grade             String?   @db.VarChar(5)
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  courses           courses?  @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users             users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, course_id, enrolled_semester])
  @@index([course_id], map: "idx_user_courses_course_id")
  @@index([user_id], map: "idx_user_courses_user_id")
}

model user_preferences {
  id                               Int                    @id @default(autoincrement())
  user_id                          Int?                   @unique
  daily_study_goal                 Int?                   @default(20)
  max_new_cards_per_day            Int?                   @default(10)
  preferred_algorithm_id           Int?                   @default(1)
  auto_generate_enabled            Boolean?               @default(true)
  preferred_card_difficulty        Int?                   @default(3)
  max_cards_per_document           Int?                   @default(50)
  preferred_generation_template_id Int?
  created_at                       DateTime?              @default(now()) @db.Timestamp(6)
  updated_at                       DateTime?              @default(now()) @db.Timestamp(6)
  repetition_algorithms            repetition_algorithms? @relation(fields: [preferred_algorithm_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  generation_templates             generation_templates?  @relation(fields: [preferred_generation_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                            users?                 @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_stats {
  id                        Int       @id @default(autoincrement())
  user_id                   Int?      @unique
  total_cards_created       Int?      @default(0)
  total_decks_created       Int?      @default(0)
  total_notes_processed     Int?      @default(0)
  total_study_time_minutes  Int?      @default(0)
  total_cards_reviewed      Int?      @default(0)
  current_study_streak_days Int?      @default(0)
  longest_study_streak_days Int?      @default(0)
  overall_accuracy          Decimal?  @default(0.00) @db.Decimal(5, 2)
  cards_mastered            Int?      @default(0)
  cards_learning            Int?      @default(0)
  cards_new                 Int?      @default(0)
  last_study_date           DateTime? @db.Date
  updated_at                DateTime? @default(now()) @db.Timestamp(6)
  users                     users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                                                    Int                 @id @default(autoincrement())
  name                                                  String              @db.VarChar(255)
  email                                                 String              @unique @db.VarChar(255)
  password_hash                                         String              @db.VarChar(255)
  semester                                              Int?
  department                                            String              @db.VarChar(255)
  profile_picture_url                                   String?             @db.VarChar(500)
  bio                                                   String?
  cgpa                                                  Float?
  created_at                                            DateTime?           @default(now()) @db.Timestamp(6)
  updated_at                                            DateTime?           @default(now()) @db.Timestamptz(6)
  audio_content                                         audio_content[]
  audio_playlists                                       audio_playlists[]
  brainrot_sessions                                     brainrot_sessions[]
  card_progress                                         card_progress[]
  chat_messages_chat_messages_receiver_idTousers        chat_messages[]     @relation("chat_messages_receiver_idTousers")
  chat_messages_chat_messages_sender_idTousers          chat_messages[]     @relation("chat_messages_sender_idTousers")
  course_reviews                                        course_reviews[]
  flashcard_decks                                       flashcard_decks[]
  generation_jobs                                       generation_jobs[]
  note_comments                                         note_comments[]
  note_interactions                                     note_interactions[]
  notes                                                 notes[]
  reservations                                          reservations[]
  study_sessions                                        study_sessions[]
  user_activity                                         user_activity[]
  user_connections_user_connections_addressee_idTousers user_connections[]  @relation("user_connections_addressee_idTousers")
  user_connections_user_connections_requester_idTousers user_connections[]  @relation("user_connections_requester_idTousers")
  user_courses                                          user_courses[]
  user_preferences                                      user_preferences?
  user_stats                                            user_stats?

  @@index([department], map: "idx_users_department")
  @@index([email], map: "idx_users_email")
}

enum course_type {
  Core
  Elective
  Optional
}

enum difficulty {
  Beginner
  Intermediate
  Advanced
}

enum file_type {
  pdf
  docx
  txt
}

enum interaction_type {
  like
  upvote
  downvote
}

enum invitation_status {
  pending
  accepted
  declined
}

enum note_visibility {
  public
  private
  course_only
}

enum req_type {
  peer
  mentor
  mentee
}

enum room_features {
  projector
  whiteboard
  computer
  wifi
  air_conditioning
  power_outlets
}

enum seat_status {
  free
  reserved
  occupied
}

enum status {
  pending
  accepted
  rejected
}

enum tutoring_role {
  tutor
  tutee
}
